# Generated by Grammarinator 23.7

import itertools

from math import inf
from grammarinator.runtime import *

class ConvertedGrammarGenerator(Generator):


    def EOF(self, parent=None):
        pass
    EOF.min_depth = 0

    def prog(self, parent=None):
        with RuleContext(self, UnparserRule(name='prog', parent=parent)) as current:
            self.json(parent=current)
            self.EOF(parent=current)
            return current
    prog.min_depth = 7

    def json(self, parent=None):
        with RuleContext(self, UnparserRule(name='json', parent=parent)) as current:
            UnlexerRule(src='{', parent=current)
            self.members(parent=current)
            UnlexerRule(src='}', parent=current)
            return current
    json.min_depth = 6

    def members(self, parent=None):
        with RuleContext(self, UnparserRule(name='members', parent=parent)) as current:
            with AlternationContext(self, [5, 6], [1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                if choice0 == 0:
                    self.keyvalue(parent=current)
                elif choice0 == 1:
                    self.keyvalue(parent=current)
                    UnlexerRule(src=',', parent=current)
                    self.members(parent=current)
            return current
    members.min_depth = 5

    def keyvalue(self, parent=None):
        with RuleContext(self, UnparserRule(name='keyvalue', parent=parent)) as current:
            self.key(parent=current)
            UnlexerRule(src=':', parent=current)
            self.value(parent=current)
            return current
    keyvalue.min_depth = 4

    def key(self, parent=None):
        with RuleContext(self, UnparserRule(name='key', parent=parent)) as current:
            self.string(parent=current)
            return current
    key.min_depth = 3

    def value(self, parent=None):
        with RuleContext(self, UnparserRule(name='value', parent=parent)) as current:
            with AlternationContext(self, [4, 3, 2, 1, 7], [1, 1, 1, 1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                [self.array, self.string, self.number, self.boolean, self.json][choice0](parent=current)
            return current
    value.min_depth = 1

    def array(self, parent=None):
        with RuleContext(self, UnparserRule(name='array', parent=parent)) as current:
            with AlternationContext(self, [4, 3], [1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                if choice0 == 0:
                    UnlexerRule(src='[', parent=current)
                    self.stringlist(parent=current)
                    UnlexerRule(src=']', parent=current)
                elif choice0 == 1:
                    UnlexerRule(src='[', parent=current)
                    self.numberlist(parent=current)
                    UnlexerRule(src=']', parent=current)
            return current
    array.min_depth = 3

    def stringlist(self, parent=None):
        with RuleContext(self, UnparserRule(name='stringlist', parent=parent)) as current:
            with AlternationContext(self, [4, 3], [1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                if choice0 == 0:
                    self.string(parent=current)
                    UnlexerRule(src=',', parent=current)
                    self.stringlist(parent=current)
                elif choice0 == 1:
                    self.string(parent=current)
            return current
    stringlist.min_depth = 3

    def numberlist(self, parent=None):
        with RuleContext(self, UnparserRule(name='numberlist', parent=parent)) as current:
            with AlternationContext(self, [3, 2], [1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                if choice0 == 0:
                    self.number(parent=current)
                    UnlexerRule(src=',', parent=current)
                    self.numberlist(parent=current)
                elif choice0 == 1:
                    self.number(parent=current)
            return current
    numberlist.min_depth = 2

    def string(self, parent=None):
        with RuleContext(self, UnparserRule(name='string', parent=parent)) as current:
            UnlexerRule(src='"', parent=current)
            self.letters(parent=current)
            UnlexerRule(src='"', parent=current)
            return current
    string.min_depth = 2

    def letters(self, parent=None):
        with RuleContext(self, UnparserRule(name='letters', parent=parent)) as current:
            with AlternationContext(self, [2, 2, 2, 1], [1, 1, 1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                if choice0 == 0:
                    self.letter(parent=current)
                    self.letters(parent=current)
                elif choice0 == 1:
                    self.letter(parent=current)
                    self.letters(parent=current)
                elif choice0 == 2:
                    self.letter(parent=current)
                    self.letters(parent=current)
                elif choice0 == 3:
                    self.letter(parent=current)
            return current
    letters.min_depth = 1

    def number(self, parent=None):
        with RuleContext(self, UnparserRule(name='number', parent=parent)) as current:
            with AlternationContext(self, [2, 2, 2, 1], [1, 1, 1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                if choice0 == 0:
                    self.digit(parent=current)
                    self.number(parent=current)
                elif choice0 == 1:
                    self.digit(parent=current)
                    self.number(parent=current)
                elif choice0 == 2:
                    self.digit(parent=current)
                    self.number(parent=current)
                elif choice0 == 3:
                    self.digit(parent=current)
            return current
    number.min_depth = 1

    def boolean(self, parent=None):
        with RuleContext(self, UnparserRule(name='boolean', parent=parent)) as current:
            with AlternationContext(self, [0, 0], [1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                UnlexerRule(src=['true', 'false'][choice0], parent=current)
            return current
    boolean.min_depth = 0

    def digit(self, parent=None):
        with RuleContext(self, UnparserRule(name='digit', parent=parent)) as current:
            with AlternationContext(self, [0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                UnlexerRule(src=['1', '2', '3', '4', '5', '6', '7', '8', '9'][choice0], parent=current)
            return current
    digit.min_depth = 0

    def letter(self, parent=None):
        with RuleContext(self, UnparserRule(name='letter', parent=parent)) as current:
            with AlternationContext(self, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                UnlexerRule(src=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'][choice0], parent=current)
            return current
    letter.min_depth = 0

    def WS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='WS', parent=parent)) as current:
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=1, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[1]), parent=current)
            return current
    WS.min_depth = 0

    _default_rule = prog

    _charsets = {
        0: list(itertools.chain.from_iterable([range(32, 127)])),
        1: list(itertools.chain.from_iterable([range(9, 10), range(10, 11), range(13, 14), range(32, 33)])),
    }
