# Generated by Grammarinator 23.7

import itertools

from math import inf
from grammarinator.runtime import *

class ConvertedGrammarGenerator(Generator):


    def EOF(self, parent=None):
        pass
    EOF.min_depth = 0

    def prog(self, parent=None):
        with RuleContext(self, UnparserRule(name='prog', parent=parent)) as current:
            self.expr(parent=current)
            self.EOF(parent=current)
            return current
    prog.min_depth = 3

    def expr(self, parent=None):
        with RuleContext(self, UnparserRule(name='expr', parent=parent)) as current:
            with AlternationContext(self, [3, 3, 3, 3, 3, 3, 3, 3, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                if choice0 == 0:
                    self.expr(parent=current)
                    UnlexerRule(src='/', parent=current)
                    self.term(parent=current)
                elif choice0 == 1:
                    self.expr(parent=current)
                    UnlexerRule(src='*', parent=current)
                    self.term(parent=current)
                elif choice0 == 2:
                    self.expr(parent=current)
                    UnlexerRule(src='+', parent=current)
                    self.term(parent=current)
                elif choice0 == 3:
                    self.expr(parent=current)
                    UnlexerRule(src='-', parent=current)
                    self.term(parent=current)
                elif choice0 == 4:
                    self.expr(parent=current)
                    UnlexerRule(src='/', parent=current)
                    self.term(parent=current)
                elif choice0 == 5:
                    self.expr(parent=current)
                    UnlexerRule(src='*', parent=current)
                    self.term(parent=current)
                elif choice0 == 6:
                    self.expr(parent=current)
                    UnlexerRule(src='+', parent=current)
                    self.term(parent=current)
                elif choice0 == 7:
                    self.expr(parent=current)
                    UnlexerRule(src='-', parent=current)
                    self.term(parent=current)
                elif choice0 == 8:
                    self.term(parent=current)
            return current
    expr.min_depth = 2

    def term(self, parent=None):
        with RuleContext(self, UnparserRule(name='term', parent=parent)) as current:
            with AlternationContext(self, [2, 1], [1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                if choice0 == 0:
                    self.digit(parent=current)
                    UnlexerRule(src='*', parent=current)
                    self.variable(parent=current)
                elif choice0 == 1:
                    self.digit(parent=current)
            return current
    term.min_depth = 1

    def variable(self, parent=None):
        with RuleContext(self, UnparserRule(name='variable', parent=parent)) as current:
            with AlternationContext(self, [1, 1], [1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                if choice0 == 0:
                    self.letter(parent=current)
                    UnlexerRule(src='**', parent=current)
                    self.digit(parent=current)
                elif choice0 == 1:
                    self.letter(parent=current)
            return current
    variable.min_depth = 1

    def letter(self, parent=None):
        with RuleContext(self, UnparserRule(name='letter', parent=parent)) as current:
            with AlternationContext(self, [0, 0, 0], [1, 1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                UnlexerRule(src=['x', 'y', 'z'][choice0], parent=current)
            return current
    letter.min_depth = 0

    def digit(self, parent=None):
        with RuleContext(self, UnparserRule(name='digit', parent=parent)) as current:
            with AlternationContext(self, [0, 0, 0], [1, 1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                UnlexerRule(src=['1', '2', '3'][choice0], parent=current)
            return current
    digit.min_depth = 0

    def WS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='WS', parent=parent)) as current:
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=1, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[1]), parent=current)
            return current
    WS.min_depth = 0

    _default_rule = prog

    _charsets = {
        0: list(itertools.chain.from_iterable([range(32, 127)])),
        1: list(itertools.chain.from_iterable([range(9, 10), range(10, 11), range(13, 14), range(32, 33)])),
    }
