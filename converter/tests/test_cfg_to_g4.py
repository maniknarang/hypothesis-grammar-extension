from hypothesis import given, settings
import os
import subprocess
import sys
import unittest

sys.path.insert(
    0,
    os.path.abspath(os.path.join(os.path.dirname(__file__), '../..', 'hypothesis_cfg')),
)

from hypothesis_cfg import cfg   # type: ignore

class TestCFGToG4(unittest.TestCase):
    @given(cfg('tests/math/cfgs/math_expr.cfg'))
    @settings(deadline=None)
    def test_math_expr_cfg_to_g4(self, math_expr):
        '''
            Test samples generated by .cfg files as inputs to converted .g4 files.
            stdout and stderr should both be empty strings if inputs are parsed correctly.
        '''
        print('Generated math expression:', math_expr)
        result = subprocess.run(
            ['antlr4-parse', 'converter/tests/mathexpr/ConvertedGrammar.g4', 'prog'],
            input=math_expr,
            text=True,
            capture_output=True
        )
        assert result.stdout == ''
        assert result.stderr == ''
        assert result.returncode == 0

    @given(cfg('tests/json/cfgs/json.cfg'))
    @settings(deadline=None)
    def test_json_cfg_to_g4(self, json_str):
        '''
            Test samples generated by .cfg files as inputs to converted .g4 files.
            stdout and stderr should both be empty strings if inputs are parsed correctly.
        '''
        print('Generated IP:', json_str)
        result = subprocess.run(
            ['antlr4-parse', 'converter/tests/json/ConvertedGrammar.g4', 'prog'],
            input=json_str,
            text=True,
            capture_output=True
        )
        assert result.stdout == ''
        assert result.stderr == ''
        assert result.returncode == 0

    @given(cfg('tests/ip/cfgs/ip.cfg'))
    @settings(deadline=None)
    def test_ip_cfg_to_g4(self, ip):
        '''
            Test samples generated by .cfg files as inputs to converted .g4 files.
            stdout and stderr should both be empty strings if inputs are parsed correctly.
        '''
        print('Generated IP:', ip)
        result = subprocess.run(
            ['antlr4-parse', 'converter/tests/ip/ConvertedGrammar.g4', 'prog'],
            input=ip,
            text=True,
            capture_output=True
        )
        assert result.stdout == ''
        assert result.stderr == ''
        assert result.returncode == 0
